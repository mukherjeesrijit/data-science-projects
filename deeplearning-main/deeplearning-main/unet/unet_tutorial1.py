# -*- coding: utf-8 -*-
"""UNet_Tutorial1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-Deg-iYmC-3hUoHPaSy7hbdAuWauKyUT
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

b = 1 #batchsize
c = 1 #channels
h = 572 #width
w = 572 #height
image = torch.rand(b,c,h,w)
print(image.shape)

class ConvReLux2(nn.Module):
    def __init__(self, ic, oc):
        super(ConvReLux2, self).__init__()

        self.convreLux2 = nn.Sequential(
              nn.Conv2d(ic, oc, 3, 1, 0),
              nn.ReLU(inplace = True),
              nn.Conv2d(oc, oc, 3, 1, 0),
              nn.ReLU(inplace = True)
        )

    def forward(self, x):

        x = self.convreLux2(x)

        return x

model1 = ConvReLux2(1,64)
model1.eval()
output1 = model1(image)
print(output1.shape)

class ConvReLux2(nn.Module):
    def __init__(self, ic, oc):
        super(ConvReLux2, self).__init__()

        self.layer1 = nn.Conv2d(ic, oc, 3, 1, 0)
        self.layer2 = nn.ReLU(inplace = True)
        self.layer3 = nn.Conv2d(oc, oc, 3, 1, 0)
        self.layer4 = nn.ReLU(inplace = True)

    def forward(self, x):

        print(x.shape)
        x = self.layer1(x)
        print(x.shape)
        x = self.layer2(x)
        print(x.shape)
        x = self.layer3(x)
        print(x.shape)
        x = self.layer4(x)
        print(x.shape)

        return x

model1 = ConvReLux2(1,64)
model1.eval()
output1 = model1(image)
print(output1.shape)

class MaxPoolConvReLux2(nn.Module):
    def __init__(self, ic, oc):
        super(MaxPoolConvReLux2, self).__init__()

        self.maxpoolconvrelux2 = nn.Sequential(
              nn.MaxPool2d(2, stride = 2),
              ConvReLux2(ic, oc)
        )

    def forward(self, x):

      x = self.maxpoolconvrelux2(x)

      return x

model2 = MaxPoolConvReLux2(64,128)
model2.eval()
output2 = model2(output1)
print(output2.shape)

class UpConv(nn.Module):
    def __init__(self, ic, oc):
        super(UpConv, self).__init__()

        self.upconv = nn.Sequential(
              nn.Upsample(scale_factor = 2),
              nn.Conv2d(ic, oc, 2, 1, 1)
        )

    def forward(self, x):

        x = self.upconv(x)
        x = x[:, :, :-1, :-1]

        return x

b = 1 #batchsize
c = 1024 #channels
h = 28 #width
w = 28 #height
image1 = torch.rand(b,c,h,w)
model3 = UpConv(1024,512)
model3.eval()
output3 = model3(image1)
print(output3.shape)

class UpConvConvReLux2(nn.Module):
    def __init__(self, ic, oc):
          super(UpConvConvReLux2, self).__init__()

          self.upconv = UpConv(ic, oc)
          self.doubleconv = ConvReLux2(ic, oc)

    def forward(self, x1, x2):

        #this reduces the feature size from ic to oc
        x1 = self.upconv(x1)

        #cropping x2 to the shape of x1
        _, _, h1, w1 = x1.shape
        x2 = x2[:, :, :h1, :w1]

        #this increases the feature size from oc to ic
        x = torch.cat((x1,x2), dim = 1)

        x = self.doubleconv(x)

        return x

b = 1 #batchsize
c = 512 #channels
h = 64 #width
w = 64 #height
image2 = torch.rand(b,c,h,w)
model4 = UpConvConvReLux2(1024, 512)
model4.eval()
output4 = model4(image1, image2)
print(output4.shape)

class UNet(nn.Module):
    def __init__(self, ic, oc):
        super(UNet, self).__init__()

        self.inconv = ConvReLux2(ic, 64)

        self.downconv1 = MaxPoolConvReLux2(64,128)
        self.downconv2 = MaxPoolConvReLux2(128,256)
        self.downconv3 = MaxPoolConvReLux2(256,512)
        self.downconv4 = MaxPoolConvReLux2(512,1024)

        self.upconv4 = UpConvConvReLux2(1024,512)
        self.upconv3 = UpConvConvReLux2(512, 256)
        self.upconv2 = UpConvConvReLux2(256, 128)
        self.upconv1 = UpConvConvReLux2(128, 64)

        self.outconv = nn.Conv2d(64, oc, 1, 1)

    def forward(self, x):

        print(x.shape)
        x1 = self.inconv(x)
        print(x1.shape)
        x2 = self.downconv1(x1)
        print(x2.shape)
        x3 = self.downconv2(x2)
        print(x3.shape)
        x4 = self.downconv3(x3)
        print(x4.shape)
        x5 = self.downconv4(x4)
        print(x5.shape)


        x6 = self.upconv4(x5, x4)
        print(x6.shape)
        x7 = self.upconv3(x6, x3)
        print(x7.shape)
        x8 = self.upconv2(x7, x2)
        print(x8.shape)
        x9 = self.upconv1(x8, x1)
        print(x9.shape)
        x10 = self.outconv(x9)
        print(x10.shape)

        return x10
b = 1 #batchsize
c = 1 #channels
h = 572 #width
w = 572 #height
image = torch.rand(b,c,h,w)

model = UNet(1,3)
model.eval()
output = model(image)